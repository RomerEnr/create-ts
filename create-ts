#!/usr/bin/env bash
":" //# comment; exec /usr/bin/env node --input-type=module - "$@" < "$0"

import { execSync } from "child_process";
import { existsSync, accessSync, constants } from "fs";

const color = (color, text) => {
  const COLORS = {
    reset: "\x1b[0m",
    red: "\x1b[31m",
    green: "\x1b[32m",
    yellow: "\x1b[33m",
    blue: "\x1b[34m",
    magenta: "\x1b[35m",
    cyan: "\x1b[36m"
  };
  return `${COLORS[color]}${text}${COLORS["reset"]}`;
};

const chop = str => str.replace(/\n$/, "");
const exec = (cmd) => chop(execSync(cmd).toString());

const VERSION = "0.3.6";
const [NAME, ...ARGS] = process.argv.slice(2).map(arg => arg.toLowerCase());
const COMMAND = process.argv[0];
const PARAMS = process.argv.slice(2).length;
const CURL = exec(`echo $(which curl)`);
const PNPM = exec(`echo $(which pnpm)`);
const YARN = exec(`echo $(which yarn)`);
const ULTRA = exec(`echo $(which ultra)`);
const CREATETS = exec(`echo $(which create-ts)`);
const PM = ULTRA ? "ultra" : PNPM ? "pnpm" : YARN ? "yarn" : "npm";

const JQ = exec(`echo $(which jq)`);
const GIT = exec(`echo $(which git)`);
const NPM = Number(exec(`echo $(npm --version)`).split(".")[0]);

if (existsSync(NAME)) {
  console.log(`La carpeta ${color("red", NAME)} ya existe... Bórrala si quieres crear un proyecto nuevo`);
  process.exit(-1);
}

if (!JQ) {
  console.log(`${color("red", "jq")} not detected. Install with ${color("yellow", "sudo apt-get install jq")}`);
  process.exit(-2);
}

if (!GIT) {
  console.log(`${color("red", "git")} not detected. Install with ${color("yellow", "sudo apt-get install git")}`);
}

const isFront = ARGS.includes("--front");
const isBack = ARGS.includes("--back");

if (NPM < 7) {
  console.log(`${color("red", "npm 7")} is required. Install with ${color("yellow", "npm install -g npm")}`);
  process.exit(-4);
}

if (NAME === "--version") {
  console.log(VERSION);
  process.exit(0);
}

if (NAME && NAME.indexOf("--") === 0) {
  console.log(`Sintaxis:`);
  console.log(`create-ts <nombre-carpeta> [options]       Crea un proyecto web.\n`);
  console.log(`${color("red", "Error")}: Escribe primero el nombre de la carpeta y los parámetros al final.`);
  process.exit(0);
}

try {
  accessSync(".", constants.R_OK | constants.W_OK);
} catch {
  console.log(`No tienes ${color("red", "permisos")} para escribir en la carpeta actual.`);
  process.exit(-5);
}

if(isFront){
  console.log(`[${color("yellow", "1")}/3] Instalando ${color("green", "vite")}...`);
  exec(`npm init vite@latest ${NAME} -y -- --template vanilla-ts >/dev/null`);

  console.log(`[${color("yellow", "2")}/3] Creando ${color("cyan", "estructura de carpetas")}...`);
  process.chdir(NAME);

  GIT && exec(`git init`);
  exec(`cat >apackage.json << EOF
  {
    "scripts": {
      "dev": "vite",
      "build": "tsc && vite build",
      "preview": "vite preview"
    },
    "keywords": [],
    "license": "ISC"
  }
EOF
`);

  exec(`jq -s '.[0] * .[1]' package.json apackage.json >package2.json`);
  exec("rm apackage.json package.json index.html");
  exec("mv package2.json package.json");
  exec("rm src/main.ts src/style.css src/counter.ts src/typescript.svg public/vite.svg");

  exec(`touch src/index.ts src/index.html src/index.css`);

  exec(`cat >postcss.config.js << EOF
export default {
  plugins: {
    "postcss-nesting": true
  }
};
EOF
`);

  exec(`cat >src/index.html << EOF
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link rel="stylesheet" href="./index.css">
</head>
<body>


<script type="module" src="./index.ts"></script>
</body>
</html>
EOF
`);  

exec(`cat >vite.config.js << EOF
import path from "path";
const isGitHubPages = true;
const folderName = path.basename(process.cwd()) + "/";
const mode = process.env.NODE_ENV === "production" ? "production" : "development";
const base = mode === "production" && isGitHubPages ? "/" + folderName : "/";

export default {
  root: "src",
  base,
  mode,
  publicDir: "../public",
  build: {
    outDir: "../dist",
    assetsDir: "./"
  }
};
EOF
`);

exec(`cat >.eslintrc.cjs << EOF
module.exports = {
  env: {
    browser: false
  },
  extends: [
    "@cowcoders/eslint-config/ts"
  ],
  parser: "@typescript-eslint/parser",
  parserOptions: {
    ecmaVersion: "latest",
    sourceType: "module"
  },
  plugins: [
    "@typescript-eslint"
  ],
  rules: {
    quotes: ["error", "double"],
    semi: ["error", "always"],
    "comma-dangle": ["error", "only-multiline"],
    "space-before-function-paren": ["error", "never"]
  }
};
EOF
`);

exec(`cat >.stylelintrc << EOF
{
  "extends": "stylelint-config-standard",
  "customSyntax": "postcss-syntax",
  "rules": {
    "declaration-colon-newline-after": "always-multi-line",
    "selector-type-no-unknown": null,
    "property-no-unknown": [
        true,
        {
          "ignoreProperties": [
            "content-visibility"
          ]
        }
    ]
  }
}
EOF
`);

exec(`cat >tsconfig.json << EOF
{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": ["ESNext", "DOM"],
    "moduleResolution": "Node",
    "strict": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "noEmit": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "skipLibCheck": true
  },
  "include": ["src"]
}
  
EOF
`);

const DEVDEP = [
  "stylelint@14.11.0", "stylelint-config-standard@28.0.0", "postcss-nesting",
  "postcss", "postcss-syntax", "postcss-html", "postcss-jsx", "postcss-styled", "@stylelint/postcss-css-in-js",
  "eslint", "eslint-plugin-import", "eslint-plugin-n@14.0.0", "eslint-plugin-promise", "eslint-config-standard@17.0.0-1",
  "gh-pages", "typescript", "@typescript-eslint/eslint-plugin", "@typescript-eslint/parser", "@cowcoders/eslint-config"
];

const DEP = [];

console.log(`[${color("yellow", "3")}/3] Instalando ${color("magenta", "dependencias")}...`);
if (DEP.length > 0) {
  const PACKAGES = DEP.join(" ");
  exec(`npx add-dependencies ${PACKAGES} 2>/dev/null`);
}

const DEVPACKAGES = DEVDEP.join(" ");
exec(`npx add-dependencies ${DEVPACKAGES} --dev 2>/dev/null`);

console.log(`\n¡${color("green", "Listo")}! Para empezar, escribe:

cd ${NAME}
git remote add origin <repo>
${PM} install
${PM} run dev`);
} else if(isBack){
  console.log(`[${color("yellow", "1")}/3] Iniciando ${color("green", `${NAME}`)}...`);
  exec(`mkdir ${NAME}`);
  process.chdir(NAME);
  exec(`npm init -y`);

  console.log(`[${color("yellow", "2")}/3] Creando ${color("cyan", "estructura de carpetas")}...`);


  GIT && exec(`git init`);
  exec(`cat >apackage.json << EOF
  {
    "scripts": {
      "prod": "${PM} run build && node dist/index.js",
      "dev": "nodemon src/server.ts",
      "build": "tsc",
      "start": "ts-node src/server.ts"
    },
    "keywords": [],
    "license": "ISC"
  }
EOF
`);

exec(`jq -s '.[0] * .[1]' package.json apackage.json >package2.json`);
exec("rm apackage.json package.json");
exec("mv package2.json package.json");

exec("mkdir -p src");
exec("touch src/index.ts");

exec(`cat >.eslintrc.cjs << EOF
module.exports = {
  env: {
    browser: false
  },
  extends: [
    "@cowcoders/eslint-config/ts"
  ],
  parser: "@typescript-eslint/parser",
  parserOptions: {
    ecmaVersion: "latest",
    sourceType: "module"
  },
  plugins: [
    "@typescript-eslint"
  ],
  rules: {
    quotes: ["error", "double"],
    semi: ["error", "always"],
    "comma-dangle": ["error", "only-multiline"],
    "space-before-function-paren": ["error", "never"]
  }
};
EOF
`);

exec(`cat >tsconfig.json << EOF
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Node 18",
  "compilerOptions": {
    "target": "ES6",                                 
    "module": "CommonJS",                                
    "rootDir": "src",                                  
    "moduleResolution": "node",                       
    "outDir": "dist",                                  
    "esModuleInterop": true,                            
    "forceConsistentCasingInFileNames": true,            
    "strict": true,                                      
    "skipLibCheck": true                                 
  },
}
EOF
`);


exec(`cat >nodemon.json << EOF
{
  "watch": ["src"],
  "ext": ".ts,.json",
  "ignore": ["src/**/*.spec.ts", "node_modules"],
  "exec": "ts-node ./src/server.ts"
}
EOF
`);

exec(`cat >.env << EOF
PORT=3000
EOF
`);

exec(`cat >.gitignore << EOF
dist
node_modules
.env
.DS_Store
.vscode
EOF
`);

exec(`cat >src/server.ts << EOF
import express from "express";
import cors from "cors";

const PORT = 3000 || process.env.PORT;
const app = express().use(express.json());
app.use(cors());

app.get("/", (req, res) => {
  res.status(200).send("API is working");
});


app.listen(PORT, () => {
  console.log("Server started on port " + PORT);
});

EOF
`);


const DEVDEP = [
    "@cowcoders/eslint-config",
    "@types/cors",
    "@types/express",
    "@types/node",
    "@typescript-eslint/eslint-plugin",
    "@typescript-eslint/parser",
    "confusing-browser-globals",
    "eslint",
    "eslint-config-next",
    "eslint-config-standard",
    "eslint-plugin-import",
    "eslint-plugin-jest",
    "eslint-plugin-n",
    "eslint-plugin-promise",
    "eslint-plugin-testing-library",
    "nodemon",
    "ts-node",
    "typescript"
];

const DEP = ["express", "dotenv", "cors"];

console.log(`[${color("yellow", "3")}/3] Instalando ${color("magenta", "dependencias")}...`);
if (DEP.length > 0) {
  const PACKAGES = DEP.join(" ");
  exec(`npx add-dependencies ${PACKAGES} 2>/dev/null`);
}

const DEVPACKAGES = DEVDEP.join(" ");
exec(`npx add-dependencies ${DEVPACKAGES} --dev 2>/dev/null`);

console.log(`\n¡${color("green", "Listo")}! Para empezar, escribe:

cd ${NAME}
git remote add origin <repo>
${PM} install
${PM} run dev`);
}

